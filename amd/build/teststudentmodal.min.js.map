{"version":3,"file":"teststudentmodal.min.js","sources":["../src/teststudentmodal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * External functions repository for theme_urcourses_default.\n *\n * @module  theme_urcourses\n * @author  2024 John Lane <john.lane@uregina.ca>\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport * as Repository from 'theme_urcourses/repository';\nimport {get_string as getString} from 'core/str';\nimport Templates from 'core/templates';\nimport Modal from 'core/modal';\nimport ModalEvents from 'core/modal_events';\nimport ModalSaveCancel from 'core/modal_save_cancel';\nimport Notification from 'core/notification';\n\nconst SELECTORS = {\n    CREATE_TEST_STUDENT: '#user-action-menu a[data-action=\"createteststudent\"]',\n    RESET_TEST_STUDENT: '#user-action-menu a[data-action=\"resetteststudent\"]'\n};\n\nconst TEMPLATES = {\n    CREATE_TEST_STUDENT_MODAL: 'theme_urcourses/create_test_student_modal',\n    RESET_TEST_STUDENT_MODAL: 'theme_urcourses/reset_test_student_modal'\n};\n\nconst init = (root) => {\n    registerEventListeners($(root));\n};\n\nconst registerEventListeners = (root) => {\n    root.on('click', SELECTORS.CREATE_TEST_STUDENT, async (e) => {\n        e.preventDefault();\n        try {\n            const testStudent = await Repository.testAccountInfo();\n            const modal = await createStudentModal(testStudent);\n            modal.getRoot().on(ModalEvents.save, async () => {\n                try {\n                    const confirmModal = await confirmCreateStudentModal(testStudent);\n                    confirmModal.getRoot().on(ModalEvents.save, async () => {\n                        try {\n                            const result = await Repository.createTestStudent(testStudent);\n                            if (result) {\n                                await showStatusPopup(\n                                    getString('createsuccess_title', 'theme_urcourses'),\n                                    getString('createsuccess_body', 'theme_urcourses')\n                                );\n                            } else {\n                                await showStatusPopup(\n                                    getString('createfail_title', 'theme_urcourses'),\n                                    getString('createfail_body', 'theme_urcourses')\n                                );\n                            }\n                        } catch (error) {\n                            Notification.exception(error);\n                        }\n                    });\n                } catch (error) {\n                    Notification.exception(error);\n                }\n            });\n        } catch (error) {\n            Notification.exception(error);\n        }\n    });\n\n    root.on('click', SELECTORS.RESET_TEST_STUDENT, async (e) => {\n        e.preventDefault();\n        try {\n            const testStudent = await Repository.testAccountInfo();\n            const modal = await resetStudentModal(testStudent);\n            modal.getRoot().on(ModalEvents.save, async () => {\n                try {\n                    const confirmModal = await confirmResetStudentModal(testStudent);\n                    confirmModal.getRoot().on(ModalEvents.save, async () => {\n                        try {\n                            const result = await Repository.resetTestStudent(testStudent);\n                            if (result) {\n                                await showStatusPopup(\n                                    getString('resetsuccess_title', 'theme_urcourses'),\n                                    getString('resetsuccess_body', 'theme_urcourses')\n                                );\n                            } else {\n                                await showStatusPopup(\n                                    getString('resetfail_title', 'theme_urcourses'),\n                                    getString('resetfail_body', 'theme_urcourses')\n                                );\n                            }\n                        } catch (error) {\n                            Notification.exception(error);\n                        }\n                    });\n                } catch (error) {\n                    Notification.exception(error);\n                }\n            });\n        } catch (error) {\n            Notification.exception(error);\n        }\n    });\n};\n\nconst createStudentModal = (testStudent) => {\n    return ModalSaveCancel.create({\n        title: getString('createmodal_title', 'theme_urcourses'),\n        body: Templates.render(TEMPLATES.CREATE_TEST_STUDENT_MODAL, testStudent),\n        removeOnClose: true,\n        buttons: {\n            save: getString('createmodal_button', 'theme_urcourses')\n        },\n        show: true\n    });\n};\n\nconst confirmCreateStudentModal = (testStudent) => {\n    return ModalSaveCancel.create({\n        title: getString('createmodal_title', 'theme_urcourses'),\n        body: getString('createmodal_confirm', 'theme_urcourses', testStudent.username),\n        removeOnClose: true,\n        buttons: {\n            save: getString('createmodal_button', 'theme_urcourses')\n        },\n        show: true\n    });\n};\n\nconst resetStudentModal = (testStudent) => {\n    return ModalSaveCancel.create({\n        title: getString('resetmodal_title', 'theme_urcourses'),\n        body: Templates.render(TEMPLATES.RESET_TEST_STUDENT_MODAL, testStudent),\n        removeOnClose: true,\n        buttons: {\n            save: getString('resetmodal_button', 'theme_urcourses')\n        },\n        show: true\n    });\n};\n\nconst confirmResetStudentModal = (testStudent) => {\n    return ModalSaveCancel.create({\n        title: getString('resetmodal_title', 'theme_urcourses'),\n        body: getString('resetmodal_confirm', 'theme_urcourses', testStudent.email),\n        removeOnClose: true,\n        buttons: {\n            save: getString('resetmodal_button', 'theme_urcourses')\n        },\n        show: true\n    });\n};\n\nconst showStatusPopup = (title, body) => {\n    return Modal.create({\n        title: title,\n        body: body,\n        removeOnClose: true,\n        show: true\n    });\n};\n\nexport default {\n    init: init,\n};"],"names":["SELECTORS","TEMPLATES","registerEventListeners","root","on","async","e","preventDefault","testStudent","Repository","testAccountInfo","createStudentModal","getRoot","ModalEvents","save","confirmCreateStudentModal","createTestStudent","showStatusPopup","error","exception","resetStudentModal","confirmResetStudentModal","resetTestStudent","ModalSaveCancel","create","title","body","Templates","render","removeOnClose","buttons","show","username","email","Modal","init"],"mappings":";;;;;;;iiCAgCMA,8BACmB,uDADnBA,6BAEkB,sDAGlBC,oCACyB,4CADzBA,mCAEwB,2CAOxBC,uBAA0BC,OAC5BA,KAAKC,GAAG,QAASJ,+BAA+BK,MAAAA,IAC5CC,EAAEC,2BAEQC,kBAAoBC,WAAWC,yBACjBC,mBAAmBH,cACjCI,UAAUR,GAAGS,sBAAYC,MAAMT,qBAEFU,0BAA0BP,cACxCI,UAAUR,GAAGS,sBAAYC,MAAMT,oBAEfI,WAAWO,kBAAkBR,mBAExCS,iBACF,mBAAU,sBAAuB,oBACjC,mBAAU,qBAAsB,0BAG9BA,iBACF,mBAAU,mBAAoB,oBAC9B,mBAAU,kBAAmB,oBAGvC,MAAOC,6BACQC,UAAUD,WAGjC,MAAOA,6BACQC,UAAUD,WAGjC,MAAOA,6BACQC,UAAUD,WAI/Bf,KAAKC,GAAG,QAASJ,8BAA8BK,MAAAA,IAC3CC,EAAEC,2BAEQC,kBAAoBC,WAAWC,yBACjBU,kBAAkBZ,cAChCI,UAAUR,GAAGS,sBAAYC,MAAMT,qBAEFgB,yBAAyBb,cACvCI,UAAUR,GAAGS,sBAAYC,MAAMT,oBAEfI,WAAWa,iBAAiBd,mBAEvCS,iBACF,mBAAU,qBAAsB,oBAChC,mBAAU,oBAAqB,0BAG7BA,iBACF,mBAAU,kBAAmB,oBAC7B,mBAAU,iBAAkB,oBAGtC,MAAOC,6BACQC,UAAUD,WAGjC,MAAOA,6BACQC,UAAUD,WAGjC,MAAOA,6BACQC,UAAUD,YAK7BP,mBAAsBH,aACjBe,2BAAgBC,OAAO,CAC1BC,OAAO,mBAAU,oBAAqB,mBACtCC,KAAMC,mBAAUC,OAAO3B,oCAAqCO,aAC5DqB,eAAe,EACfC,QAAS,CACLhB,MAAM,mBAAU,qBAAsB,oBAE1CiB,MAAM,IAIRhB,0BAA6BP,aACxBe,2BAAgBC,OAAO,CAC1BC,OAAO,mBAAU,oBAAqB,mBACtCC,MAAM,mBAAU,sBAAuB,kBAAmBlB,YAAYwB,UACtEH,eAAe,EACfC,QAAS,CACLhB,MAAM,mBAAU,qBAAsB,oBAE1CiB,MAAM,IAIRX,kBAAqBZ,aAChBe,2BAAgBC,OAAO,CAC1BC,OAAO,mBAAU,mBAAoB,mBACrCC,KAAMC,mBAAUC,OAAO3B,mCAAoCO,aAC3DqB,eAAe,EACfC,QAAS,CACLhB,MAAM,mBAAU,oBAAqB,oBAEzCiB,MAAM,IAIRV,yBAA4Bb,aACvBe,2BAAgBC,OAAO,CAC1BC,OAAO,mBAAU,mBAAoB,mBACrCC,MAAM,mBAAU,qBAAsB,kBAAmBlB,YAAYyB,OACrEJ,eAAe,EACfC,QAAS,CACLhB,MAAM,mBAAU,oBAAqB,oBAEzCiB,MAAM,IAIRd,gBAAkB,CAACQ,MAAOC,OACrBQ,eAAMV,OAAO,CAChBC,MAAOA,MACPC,KAAMA,KACNG,eAAe,EACfE,MAAM,iBAIC,CACXI,KAtIUhC,OACVD,wBAAuB,mBAAEC"}